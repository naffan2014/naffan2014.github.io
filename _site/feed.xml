<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-03-09T13:24:50+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">拿饭网</title><subtitle>拿饭网是一个私人博客系统，采用jekyll博客系统部署在GitHub-Pages服务上。拿饭网内的文章均出自作者，作者以技术为导向同时兼顾自己的生活与对经济的观点。</subtitle><author><name>张一帆</name></author><entry><title type="html">git的rebase可以实现合并commit</title><link href="http://localhost:4000/tech/2019/03/08/1.html" rel="alternate" type="text/html" title="git的rebase可以实现合并commit" /><published>2019-03-08T00:00:00+08:00</published><updated>2019-03-08T00:00:00+08:00</updated><id>http://localhost:4000/tech/2019/03/08/1</id><content type="html" xml:base="http://localhost:4000/tech/2019/03/08/1.html">&lt;p&gt;玩了那么多年的git了，现如今你只会add,commit,push,pull,merge，你都不好意思说你会git。chrrey-pick , filter branch, rebase等操作你还是需要盘一下的。&lt;/p&gt;

&lt;p&gt;git rebase是干什么的呢？学者们把他成为变基。说是把很多的commit合并到一个commit中。之前，我想不明白除了把commit合并为一个以外还有什么地方会用到。几天，我确实碰到了一个现实中的问题。这个问题是出自我的博客的，我的docs由于很多次提交了，每次要合到master上都得来一次filter branch。这个操作刚开始会很快，但是随着博客内容的增多，每次去合master的时候都得走一次从头到尾的遍历，实属受不了。（读者可能并不明白我再说什么，你们也不用想明白。）&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;lazy&quot; data-original=&quot;https://s2.ax1x.com/2019/03/09/ASZxpD.gif&quot; src=&quot;/images/default.jpg&quot; alt=&quot;一顿操作&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我们可以从图中看到，我首先创建了一个test文件。我们将第一行写入并置为第一次提交。之后再插入第二行作为第二行提交。现在，我想把第二次提交和第一次提交合并。这样，就不会有人再知道我曾经有过第二次提交了。这个操作就是rebase&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git rebase -i HEAD~2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们用上面的命令，就可以将最近的两次提交合并到最早的提交。之后会出现一个界面。&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;lazy&quot; data-original=&quot;https://s2.ax1x.com/2019/03/09/ASB856.png&quot; src=&quot;/images/default.jpg&quot; alt=&quot;rebase的todo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这个界面前两行列出了rebase所包含的commit。剩下的就是此操作的介绍。我们只需要关心pick和squash两个关键字。通过英文我们了解到，图中的意义是将第二次操作合并至第一次操作，这样在log里面只会显示一次log，然而确实是两次更改。退出即可。如果，rebase发现没有版本冲突就会直接完成rebase操作。如果有冲突，我们就像一般解决冲突一样去纠正就好，然后git add即可，不用commit，然后运行 git rebase –continue即可。 有的时候，你并不太操心rebase发生的冲突，我们可以运行git rebase –skip跳过冲突。&lt;/p&gt;

&lt;p&gt;最后，我们还要考虑push到远端的操作。因为当前本地的版本和远端的版本不一样且不是继承版本状态。所以，系统会提示你先git pull，然后再git push。 当心，系统是好心，但如果你真像系统要求你一样去做了，那么你rebase的这些操作都会随着git pull更改为远端的版本。所以，我们在这里需要git push -f，也就是强制推送到远端不进行版本的对比。这个操作其实在多人合作的时候会产生很多副作用，让你瞬间就扮演上了小队破坏者的身份。因此，很多开发者都不建议在多人项目中用rebase这个命令，除非你和你的小队已经充分沟通过此事，而且大家也互相明白做此事的重要性，而且大家还不是新兵蛋蛋。&lt;/p&gt;

&lt;p&gt;好了，我就记录到这里吧。&lt;/p&gt;</content><author><name>张一帆</name></author><category term="tech" /><category term="git" /><summary type="html">玩了那么多年的git了，现如今你只会add,commit,push,pull,merge，你都不好意思说你会git。chrrey-pick , filter branch, rebase等操作你还是需要盘一下的。</summary></entry><entry><title type="html">学习用GO写了个聊天室</title><link href="http://localhost:4000/tech/2019/03/07/01.html" rel="alternate" type="text/html" title="学习用GO写了个聊天室" /><published>2019-03-07T00:00:00+08:00</published><updated>2019-03-07T00:00:00+08:00</updated><id>http://localhost:4000/tech/2019/03/07/01</id><content type="html" xml:base="http://localhost:4000/tech/2019/03/07/01.html">&lt;p&gt;　　最近在看GO语言，跟着教程一步一步手敲代码，拼出了个聊天室程序。其中涉及到了go语言中的go,defer,make,chan,select。了解了go中的变量类型以及部分的类型操作。同时，go语言的语言结构和逻辑控制也有了大概的初步认识。而且，也用到了go特有的语言性质。&lt;/p&gt;

&lt;p&gt;　　断断续续那么长时间学习go了，今天才第一次写出个像样的程序。总是感觉程序大都一个样，真正上手才是王道。&lt;/p&gt;

&lt;p&gt;　　创建一个聊天室服务端,chatroom_client.go&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-golang&quot;&gt;package main

import (
	&quot;fmt&quot;
	&quot;net&quot;
	&quot;strings&quot;
)
//创建基于链接的哈希map，方便知道链接对应的端口号
var onlineConns = make(map[string]net.Conn) 
//创建一个频道，长度1000.用来存储信息
var messageQueue = make(chan string, 1000)
//创建一个返回布尔值的频道，用来应对没有信息的情况
var quitChan = make(chan bool)
//检查错误，通用方法
func CheckError(err error) {
	if err != nil {
		panic(err)
	}
}
//将消息存进频道中
func ProcessInfo(conn net.Conn){
	buf := make([]byte , 1024) 创建个1024字节的字节流
	defer conn.Close() //程序运行完毕时关闭链接
    //循环体
	for{
	   //从信息流读出消息
		numOfBytes,err:= conn.Read(buf) 
		if err != nil{
			panic(err)
		}
     //如果字节不等于零，就把消息字符化发到消息频道中
	   if numOfBytes != 0{
			message := string(buf[0:numOfBytes])
			messageQueue &amp;lt;- message
		}
	}
}
//消费消息
func ConsumeMessage(){
	for{
	   //select是配合频道使用的，选择进哪个通信操作
		select{
			case message:=&amp;lt;-messageQueue:
				//对消息进行解析
				doProcessMessage(message)
			case &amp;lt;- quitChan:
			   //空消息，什么都不做~
				break
			}
	}
}
//对消息进行解析
func doProcessMessage(message string){
    //将消息以“#”分开，如 127.0.0.1:3389#你好
    //就把这个消息分成两段，一段为127.0.0.1:3389，一段为你好
    //这里面没有考虑消息体里面包括#好的情况
	contents := strings.Split(message,&quot;#&quot;)
	if len(contents) &amp;gt;1 {
		addr := contents[0]
		sendMessage := contents[1]
     //将消息体格式化
		addr =strings.Trim(addr, &quot; &quot;)
		//判断哈希map中这个地址存不存在，存在就往这个链接里写消息体
		if conn,ok := onlineConns[addr]; ok{
			_,err := conn.Write([]byte(sendMessage))
			if err != nil{
			  //不存在就写发送失败
				fmt.Println(&quot;online conns send failure!!!!&quot;)
			}
		}
	}
}
//主函数
func main(){
  //监听127.0.0.1:8080端口。
	listen_socket , err := net.Listen(&quot;tcp&quot;,&quot;127.0.0.1:8080&quot;)
	CheckError(err)
	//程序退出后监听关闭
	defer listen_socket.Close()
   //增加用户体验，让用户知道程序在运行中
	fmt.Println(&quot;server is waitting...&quot;)
  //开启协程来消费消息
	go ConsumeMessage()
  //无限循环，来监听消息并处理消息
	for{
		conn,err := listen_socket.Accept()
		CheckError(err)
     //打印出连接过来的远端地址
		addr := fmt.Sprintf(&quot;%s&quot;, conn.RemoteAddr())
		//将这个连接并存储到hashmap
		onlineConns[addr] = conn
     //循环hashmap，打印连接上来的连接
		for i := range onlineConns{
			fmt.Println(i)
		}
		//运行协程，将连接存到频道中。程序不停，此过程不断
		go ProcessInfo(conn)
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;　　再创建一个客户端文件,chatroom_client.go&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-golang&quot;&gt;package main

import (
	&quot;bufio&quot;
	&quot;fmt&quot;
	&quot;net&quot;
	&quot;os&quot;
	&quot;strings&quot;
)

func CheckError(err error) {
	if err != nil {
		panic(err)
	}
}
//发送消息
func MessageSend(conn net.Conn) {
	var input string
	//无限循环，发送消息
	for {
	   //监听输入将键入的信息记下来
		reader := bufio.NewReader(os.Stdin)
		//将记下来的消息以每行开始读
		data, _, _ := reader.ReadLine()
		//将data字符化存入到input
		input = string(data)
     //如果input为exit就退出，结束连接
		if strings.ToUpper(input) == &quot;EXIT&quot; {
			conn.Close()
			break
		} else {
		  //否则，往这个连接中写入字节流
			_, err := conn.Write([]byte (input))
			if err != nil {
				conn.Close()
				fmt.Println(&quot;client connect failure&quot; + err.Error())
			}
		}
	}
}

func main() {
  //连接8080端口
	conn, err := net.Dial(&quot;tcp&quot;, &quot;127.0.0.1:8080&quot;)
	CheckError(err)
	defer conn.Close()
   //开启协程发送消息，无限循环的
	go MessageSend(conn)
	//创建1024长度的字节流
	buf := make([]byte, 1024)
	//无限循环，读取字节流信息并打印
	for {
		_, err := conn.Read(buf)
		CheckError(err)
		fmt.Println(&quot;server receive message content: &quot; + string(buf))
	}

	fmt.Println(&quot;client program done&quot;)
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;　　以上程序可以运行起来了。先go run chatroom_server.go。之后再起两个client。server中能看到连接上来的两个ip:port。在client中输入ip:port#文字。就可以在对应的client看到发送过来的信息了。&lt;/p&gt;</content><author><name>张一帆</name></author><category term="tech" /><category term="go,聊天室" /><summary type="html">　　最近在看GO语言，跟着教程一步一步手敲代码，拼出了个聊天室程序。其中涉及到了go语言中的go,defer,make,chan,select。了解了go中的变量类型以及部分的类型操作。同时，go语言的语言结构和逻辑控制也有了大概的初步认识。而且，也用到了go特有的语言性质。</summary></entry><entry><title type="html">不支持caching_sha2_password的MYSQL8应如何连接</title><link href="http://localhost:4000/tech/2019/03/01/01.html" rel="alternate" type="text/html" title="不支持caching_sha2_password的MYSQL8应如何连接" /><published>2019-03-01T00:00:00+08:00</published><updated>2019-03-01T00:00:00+08:00</updated><id>http://localhost:4000/tech/2019/03/01/01</id><content type="html" xml:base="http://localhost:4000/tech/2019/03/01/01.html">&lt;p&gt;　　真的好长时间没有在这个博客写东西了。自从17年底到18年下旬自己发生了天翻地覆的变化，所以没有太多时间也没有太多心情来写东西。虽然，目前的状况也还不太稳定。但是，心情变得好多了。所以，我想过来写一写东西了。&lt;/p&gt;

&lt;p&gt;　　这次想写的东西还挺多，一是顺便把之前的事情都按照时间点归总一下然后写个回忆录啥的。二是接着把我这段时间学过的东西、用过的东西、见过的东西写一写。这次写的东西就是我昨天重起php5.6时，遇到的早已见过的mysql8把plugin从“mysql_native_password”换成后“caching_sha2_password”服务连接不上的问题。其实，网上很多文章已经写了这个问题了，我也是在2018年4月份第一批遇到此问题的那批用户，那么我为啥要写这篇文章呢？因为，我想把我一边遇到问题一边解决问题的过程和为什么这么做的原因描述一下。我觉得这应该会更加有意义吧。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;1.caching_sha2_password和mysql_native_password是什么&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;　　这两个是MYSQL的加密插件的规则，也可以说是加密算法。mysql8之前的mysql5都用的是native，后来才改成了sha2。安全方面的考虑吧。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;2.在哪里我可以看到这个值呢？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;登录mysql&lt;/li&gt;
  &lt;li&gt;use mysql;&lt;/li&gt;
  &lt;li&gt;select * from user \G;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;　　这里面包含的就是系统记录的登录用户，如果你一般用的是账户为root的用户，那么你就会发现User一列会有个root的记录。其后还会包括plugin，这个就是你在用的加密算法。之后的authentication_string就是你的密码被算法加密后的密文了。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-mysql&quot;&gt;            Host: localhost
                User: root             (*)
           Select_priv: Y
           Insert_priv: Y
           Update_priv: Y
           Delete_priv: Y
           Create_priv: Y
             Drop_priv: Y
           Reload_priv: Y
         Shutdown_priv: Y
          Process_priv: Y
             File_priv: Y
            Grant_priv: Y
       References_priv: Y
            Index_priv: Y
            Alter_priv: Y
          Show_db_priv: Y
            Super_priv: Y
 Create_tmp_table_priv: Y
      Lock_tables_priv: Y
          Execute_priv: Y
       Repl_slave_priv: Y
      Repl_client_priv: Y
      Create_view_priv: Y
        Show_view_priv: Y
   Create_routine_priv: Y
    Alter_routine_priv: Y
      Create_user_priv: Y
            Event_priv: Y
          Trigger_priv: Y
Create_tablespace_priv: Y
              ssl_type:
            ssl_cipher:
           x509_issuer:
          x509_subject:
         max_questions: 0
           max_updates: 0
       max_connections: 0
  max_user_connections: 0
                plugin: mysql_native_password             (*)
 authentication_string: *332A08JD6001FESDFDSLI11083DS41242991       (*)
      password_expired: N
 password_last_changed: 2019-02-28 19:43:03
     password_lifetime: 0
        account_locked: N
      Create_role_priv: Y
        Drop_role_priv: Y
Password_reuse_history: NULL
   Password_reuse_time: NULL
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;3.比如你在用PHP连接MYSQL时会报“requested authentication method unknown to the client [caching_sha2_password]”的错误，我们如何解决呢？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;　　首先，我们要明确一下问题。&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;正如上面列的mysql数据，你数据中plugin是什么？authentication_string加密前的密码是正确的么？如果你不确定密码的话你最好重置一下密码，如果不需要就跳到问题【5】&lt;/li&gt;
  &lt;li&gt;你的My.cnf（*unix）中的配置应该怎么配?&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;4.如何重置mysql密码&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;关闭mysql服务。&lt;/li&gt;
  &lt;li&gt;找到mysql的安装位置，并进入bin文件夹，会发现mysqld运行文件&lt;/li&gt;
  &lt;li&gt;运行 mysqld –skip-grant-tables #跳过登录检验环节直接启动mysql&lt;/li&gt;
  &lt;li&gt;use mysql;&lt;/li&gt;
  &lt;li&gt;ALTER USER ‘root’@’localhost’ IDENTIFIED BY ‘你的密码’ PASSWORD EXPIRE NEVER; #修改密码规则&lt;/li&gt;
  &lt;li&gt;ALTER USER ‘root’@’localhost’ IDENTIFIED WITH mysql_native_password BY ‘你的密码’; #更新用户密码&lt;/li&gt;
  &lt;li&gt;flush privileges; #刷新权限，必须做&lt;/li&gt;
  &lt;li&gt;重启你的机器，建议你做这一步&lt;/li&gt;
  &lt;li&gt;开启mysql服务&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;5.My.cnf的配置&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;　　下面的配置是我的配置，标（*）的地方就是要将密码规则插件改mysql_native_password。（*）要在[mysqld]下面。因为在用php连接服务的时候会走这个配置。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-mysql&quot;&gt;# For advice on how to change settings please see
# http://dev.mysql.com/doc/refman/5.7/en/server-configuration-defaults.html
# *** DO NOT EDIT THIS FILE. It's a template which will be copied to the
# *** default location during install, and will be replaced if you
# *** upgrade to a newer version of MySQL.
[mysqld]
default_authentication_plugin=mysql_native_password (*)
# Remove leading # and set to the amount of RAM for the most important data
# cache in MySQL. Start at 70% of total RAM for dedicated server, else 10%.
# innodb_buffer_pool_size = 128M
# Remove leading # to turn on a very important data integrity option: logging
# changes to the binary log between backups.
# log_bin =~/logs/mysql/mysql-bin
# These are commonly set, remove the # and set as required.
# basedir = /usr/local/var/mysql/
 datadir = /usr/local/var/mysql
 port = 3306
# server_id = .....
 socket = /usr/local/var/run/mysql.sock
# Remove leading # to set options mainly useful for reporting servers.
# The server defaults are faster for transactions and fast SELECTs.
# Adjust sizes as needed, experiment to find the optimal values.
# join_buffer_size = 128M
# sort_buffer_size = 2M
# read_rnd_buffer_size = 2M
sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES
[client]
socket = /usr/local/var/run/mysql.sock
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;更改密码规则及密码&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;登录mysql&lt;/li&gt;
  &lt;li&gt;use mysql;&lt;/li&gt;
  &lt;li&gt;ALTER USER ‘root’@’localhost’ IDENTIFIED BY ‘你的密码’ PASSWORD EXPIRE NEVER; #修改密码规则&lt;/li&gt;
  &lt;li&gt;ALTER USER ‘root’@’localhost’ IDENTIFIED WITH mysql_native_password BY ‘你的密码’; #更新用户密码&lt;/li&gt;
  &lt;li&gt;flush privileges; #刷新权限，必须做&lt;/li&gt;
  &lt;li&gt;重启Mysql服务&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;　　自此，sha2的连接问题可以告一段落了。我有时间把我18年4月份折腾mysql8的数据库文件的经验发出来吧。&lt;/p&gt;</content><author><name>张一帆</name></author><category term="tech" /><category term="mysql" /><summary type="html">　　真的好长时间没有在这个博客写东西了。自从17年底到18年下旬自己发生了天翻地覆的变化，所以没有太多时间也没有太多心情来写东西。虽然，目前的状况也还不太稳定。但是，心情变得好多了。所以，我想过来写一写东西了。</summary></entry><entry><title type="html">多git账号共存</title><link href="http://localhost:4000/tech/2018/09/01/01.html" rel="alternate" type="text/html" title="多git账号共存" /><published>2018-09-01T00:00:00+08:00</published><updated>2018-09-01T00:00:00+08:00</updated><id>http://localhost:4000/tech/2018/09/01/01</id><content type="html" xml:base="http://localhost:4000/tech/2018/09/01/01.html">&lt;blockquote&gt;
  &lt;p&gt;Are you serious about network security? Then check out SSH, the Secure Shell, which provides key-based authentication and transparent encryption for your network connections&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在我们的工作中，版本控制工具通常会用git工具。当你公司用git的时候你肯定不想用你github的账号进行推送。反过来也一样。那我就说一下如何配置才能将不同git域分开来。&lt;/p&gt;

&lt;p&gt;首先，我默认读者具备SSH keys的知识。&lt;/p&gt;

&lt;p&gt;在~/.ssh文件夹内有个config文件。这个文件就是用来实现多git账号共存的配置文件。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt; Host github@github.com   //是git服务的主机
 HostName github.com    //git的域名
 User naffan2014    //登录名，是你这个网站的用户ID
 IdentityFile ~/.ssh/id_rsa_github //ssh keys存储的文件位置

 Host git@sina.com
 HostName sina.com
 User naffan@sina.com
 IdentityFile ~/.ssh/id_rsa
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后，我们还需要将这个配置加载到ssh-agent。用ssh-add命令。但是，这个命令只是暂时将sshkey添加到ssh agent当中。 重启电脑以后就会失效。所以我们需要添加-K 参数。让他添加到mac的keychain中。&lt;/p&gt;</content><author><name>张一帆</name></author><category term="tech" /><category term="ssh,Github" /><summary type="html">Are you serious about network security? Then check out SSH, the Secure Shell, which provides key-based authentication and transparent encryption for your network connections</summary></entry><entry><title type="html">《超级快速阅读》</title><link href="http://localhost:4000/books/2018/01/05/01.html" rel="alternate" type="text/html" title="《超级快速阅读》" /><published>2018-01-05T00:00:00+08:00</published><updated>2018-01-05T00:00:00+08:00</updated><id>http://localhost:4000/books/2018/01/05/01</id><content type="html" xml:base="http://localhost:4000/books/2018/01/05/01.html">&lt;p&gt;这本书是我在2017年10月中旬读完的，读这本书的起因是因为我总觉得自己读书的效率太低下了。我曾经听到我的舅妈说她和她女儿，也就是我的妹妹一起看小说时，我舅妈刚看到一页的中间位置时妹妹已经看完整页了，于是我舅妈就很诧异“你读那么快都记住了么？”，妹妹一听自然而然的就把这页讲到过的事情复述了一遍。这下一来，舅妈就被妹妹的读书速度所震惊到了。&lt;/p&gt;

&lt;p&gt;说者无意，听者有心。当时，我脑子里就在想妹妹为什么能够读书那么快呢？后来我自己有意地去试了下自己的读书速度，我能够明显感觉到自己读书的方式是在一行一行的看，速度不但慢，有时还会因为分心想别的事情，然而等回过神后，发现这段时间里面所读的内容通通没有印象，只能又重新读过。&lt;/p&gt;

&lt;p&gt;自打我在上初中的时候，学校就有专门安排过快速阅读这门课程。当时的我傻傻什么都不懂，根本不知道这门课程的重要性，每每上这课的时候。我总是遥看窗外的操场，心早就飞的不知踪影了。若干年后我家装修，突然从柜子里面翻出了当时这门课程的教材，还挺贵20块1本呢。于是，我就拿起这个教材来准备认真的学一学。但是，后来觉得这玩意太枯燥就早早放弃了。到了现在，我对阅读的渴望越变越大，一直惯用的读书技巧早已过时，而且有的时候我都觉得自己受制于这种习惯，所以这次我忽然在寻找图书的时候发现了这本书，于是就准备再好好的重新学一下这门课程。&lt;/p&gt;

&lt;p&gt;总的来说，本书所要传授的阅读方法用下面这张图就可以总的概括起来：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://kupai-open.essintra.ejucloud.cn/14c9cb67-154c-479d-a838-cb36dc2c51f2.jpeg@imageMogr2/thumbnail/700x&quot; alt=&quot;学习流程示意图&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;视觉卡片&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;其中最为重要的一环，就是作者多次强调的“制作视觉卡片”。这是因为作者研究了人脑如何能够快速的记忆事情。他得出的结果是认为人脑与生俱来的就对图很敏感。故把一些事情记录在不同的图片上，就会给读者留下更深的印象。同时，再加上关键词的辅助，就更能够让大脑理解这些东西了。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;大纲是了解全书的第一方法&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;首先，要了解一本书的话。应该先将书中的大纲翻一翻，就像在拼图之前首先要看清包装上的完整图像。这就相当于在阅读的时候粗略了解一下整本书的大致内容。在阅读的过程中应该主动的去思考，由于人脑的左脑和右脑各自负责的功能是不一样的，只有让两个半脑分工配合起来，才会记东西越来越快。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;左脑与右脑&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;左脑负责的有逻辑，语言，数字，次序，因果，线性分析等。右脑负责的有节奏，幻想，白日梦，色彩，空间感，全貌等。对于一段要记忆的文字来说，我们通过反复阅读很难记住故事的内容，这是因为死记硬背的机械式方法不仅消耗了大量时间，还无法保证长期记忆。一个星期以后你完全有可能全部忘记。然而我们可以采用右脑思维顺利的解决这类问题。具体事例可以在书中寻找。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;视线范围&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;大多数人以为自己的实现移动轨迹是从左向右移动然后换行再从左向右移动，其实不然。真正的实现其实是在向后跳跃着，因为我们想要看清一个物体的时候，首先就要将实现停止下来，然后进行对焦，直到生成清晰的图像。这样就会产生三个问题：低效阅读、无法集中注意力及视线的下意识游移。作者首先就要带领我们改变这个习惯，作者建议我们用手指作为参照物，当手指平行移动的时候，实现要跟住手指的移动方向进行阅读。当阅读的速度提高起来的时候，就到了我们可以慢慢从一目几行，一目多行，乃至一目十行的时候了。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;舒适区&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;要掌握新的阅读技巧，首先我们必须超越自己现有的阅读水平。这意味着我们必须勇敢迈出自己现有的舒适区。每次离开原有的舒适区，都是一次学习新知识的旅程。一分耕耘，一分收获，练得越勤，你的阅读能力进步的就越快。&lt;/p&gt;

&lt;p&gt;这本工具书在阅读能力上给我了很大帮助，我记得我按照这本书的要求做了阅读能力的测试，当时我的阅读速度是每分钟250个字。但是，利用书中教我的方法我可以让自己的速度一下子翻6倍。而且，我对读过的内容大致也都能记得下来。所以，我很推荐这本书。&lt;/p&gt;</content><author><name>张一帆</name></author><category term="books" /><category term="工具,书籍" /><summary type="html">　　本书是《快速阅读》作者克里斯蒂安•格吕宁的成名之作。他在临近大学毕业准备德国司法考试期间，因为不能像其他同学一样有充足的时间复习备考，于是在参考众多学习方法类书籍的基础上独辟蹊径，创造出一套风靡全球的学习方法。</summary></entry><entry><title type="html">《富爸爸，穷爸爸》</title><link href="http://localhost:4000/books/2018/01/02/01.html" rel="alternate" type="text/html" title="《富爸爸，穷爸爸》" /><published>2018-01-02T00:00:00+08:00</published><updated>2018-01-02T00:00:00+08:00</updated><id>http://localhost:4000/books/2018/01/02/01</id><content type="html" xml:base="http://localhost:4000/books/2018/01/02/01.html">&lt;p&gt;　　终于有时间可以闲下来写点东西了，记得上次能有时间这么写点东西也是半年以前的事情了。2017年底发生了太多的事情，我也无法一一在这里表述，等我慢慢的把之前经历，看过的东西总结出来以后再慢慢道来吧。&lt;/p&gt;

&lt;p&gt;　　今天，我想写一篇关于这本书的读后感，读完这本书其实大概是在17年的10月份左右，那时候有一些时间可以看看关于理财的书籍。本想看完以后立刻写出读后感的但是由于事情很多的原因给耽搁了。其实，在好几年前古月兄就建议我来看看了，我当时也有一些想法但是终于被我托到了这个时间。后来，自己的女朋友也在我之前把这本书读完了，她也在极力的劝我来读读的。我记得我们在15年到16年的时候经常会结伴的去桌游吧玩桌游，当时古月兄就极力的推荐桌游老板进一款叫现金流的游戏，过了半年老板终于进了这款游戏，可是我们也再也没有时间去那里玩了。原因大致是大家都不太能凑到一起，而且各自的生活也在朝着不同的方向前进着。&lt;/p&gt;

&lt;p&gt;　　说来也巧，我刚读完这本书的时候我正好经历着一些痛苦的事情，幸运的是当时的心情还真有一些和这本书里讲到的东西对应上了。所以，我现在打算将自己通过对这本书的理解进行一次总结。&lt;/p&gt;

&lt;p&gt;　　在2009年我大学毕业，妈妈提前为我打算以后有可能结婚时用房就在回龙观那里购置了2套商住两用房子，房子的位置很好而且还是挨着的两户。这种想法一是为了生活，二也是为了将来有可能会脱手而买下的。当时是8000/平，我们家里一时拿不出这么多钱，所以也是和亲朋借钱买下的，谁知随着房地产野蛮型的发展，房子的总价也在不断的在水涨船高。很快我们家中很快的把借来的钱全部还完了，而且自家的总资产也翻了几倍。这些事实给当时懵懂的我留下了太多冲击，我知道当时我们家每个成员的月收入情况，可就算我们家辛勤工作几十年也不可能赚到这么多钱的。这里边就蕴含着很多经济学的道理，而我家也算乘上房地产涨价的最后一班车，后来很多人都佩服我们当时的决断。&lt;/p&gt;

&lt;p&gt;　　后来了解到我周围的朋友有在比我还早几年就在回龙观这块购买了很多套房子，当时的房价肯定要比8000低的，以至于在猛涨之后，他们将这几套租了出去，得到了比自己辛勤干活好几倍的收入。可想而知，发财并不是你多努力的工作才能实现，像这样的情况有很多。&lt;/p&gt;

&lt;p&gt;　　工作了这么多年，看到的也很多很多了。有比自己高很多级别的领导，有比自己精明许多的同事。他们中的很多人大都全身心的铺在了工作上，工作确实可以得到稳定的现金流，但是他们都没有能够实现在几年内使自己的身价翻很多倍。他们，同时也包括我浪费了很多时间和机会，将自己的力量铺在了为被人修砌道路的方式上。&lt;/p&gt;

&lt;p&gt;　　这本书，开门见山的提出了“富人不为钱工作”，作者通过自己幼年时的一个故事讲述了自己是如何懂得了这个道理的。写到这里我本想把我认为重要的子句摘抄到这的，但是经过通读后发现竟然长达16页，故写在这里是不合适的。那么，我就简单的摘抄几句我认为连贯且富有表达性的语句吧。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;富爸爸笑着又说了：“25美分1小时怎么样？这样是否能让你们心跳加速？”&lt;br /&gt;
我摇摇头说：“不会啊”，可事实上，25美分1小时对我而言可真是一大笔钱啊！&lt;br /&gt;
“好，我每小时给你1美元。”富爸爸带着狡黠的笑容说。&lt;br /&gt;
我的心开始狂跳，头也开始发晕。“接受，快接受。”我的心里在喊，但我不相信我所听到的，所以什么也没说。&lt;br /&gt;
“好吧，每小时2美元。”&lt;br /&gt;
我那9岁的大脑和心脏几乎要爆炸了。毕竟这是1956年，每小时2美元将使我成为世界上最有钱的孩子！我无法相信哪里能挣到这么多钱。我想说：“好的”，我真想达成这笔交易。&lt;br /&gt;
……&lt;br /&gt;
“好，5美元1小时。”&lt;br /&gt;
我的内心突然平静下来了，内心发生了一些变化。&lt;font color=&quot;red&quot;&gt;这个出价太高了，显得有些荒谬。&lt;/font&gt;&lt;br /&gt;
“很好，”富爸爸轻轻地说，“大多数人都希望有一份工资收入，之所以会这样是因为他们有恐惧和贪婪之心。先说恐惧感，没钱的恐惧会刺激我们努力工作，当我们得到报酬时，贪婪或欲望又开始让我们去想所有钱能买到的东西。于是就形成了一种模式。”&lt;br /&gt;
“什么模式？”我问。&lt;br /&gt;
“起床，上班，付账，再起床，再上班，再付账……他们的生活就在无穷尽地为这两种感觉而奔忙：恐惧和贪婪。给他们更多的钱，他们就会以更高的开支重复这种循环。”&lt;br /&gt;
……&lt;br /&gt;
当我坐在那儿听着富爸爸的话时，脑中无数次地闪出了我爸爸的话：“我对钱不感兴趣。”他常说这句话，他说：“我工作是因为我热爱这个职业。”
“那我们该怎么办？”我问，“不为钱工作直到所有的恐惧和贪婪都消失吗？”
“那只会浪费时间。人需要有感情，它使我们真实，&lt;font color=&quot;red&quot;&gt;感情这个词表达着行动的能力&lt;/font&gt;。真实地看待你的感情，以你喜欢的方式运用你的头脑和感情，而不是与自己作对。”
……&lt;br /&gt;
“别急于行动。大多数人不懂得是他们的感情代替了他们的思想，感情是感情，你还必须学会&lt;font color=&quot;red&quot;&gt;独立思考&lt;/font&gt;。”&lt;br /&gt;
……&lt;br /&gt;
“比如说吧，如果人们害怕没有钱花，就立刻去找工作，然后挣到了钱，使恐惧感消除。这样做似乎很对。可一旦这样理解，他就不会去思考这样一个问题，一份工作能长期解决你的经济问题吗？依我看，答案是‘不能’，尤其从人的一生来看更是如此。工作只是试图用暂时的办法来解决长期的问题。”&lt;br /&gt;
……&lt;br /&gt;
“我想教你们学会支配钱，而不是害怕它，这在学校里是学不到的。如果你不学，你就会变成钱的奴隶。”&lt;br /&gt;
……&lt;br /&gt;
“你看，我们最终是雇员，只不过处于不同层次而已。我只希望孩子们有机会避开由恐惧和欲望组成的陷阱，能按你喜欢的方式选用恐惧和欲望，别让恐惧和欲望控制你。”&lt;br /&gt;
……&lt;br /&gt;
“但你们没有对感觉屈服，你们推迟了决定的作用。这是极为重要的。我们总是有着恐惧或贪婪之心。从现在开始，对你们来说，重要的是&lt;font color=&quot;red&quot;&gt;运用这些感情&lt;/font&gt;为你们的长期利益谋利，别让你们的感情控制了思想。”&lt;br /&gt;
……&lt;br /&gt;
“不错，当你长大后，你的玩具会变贵，会变成要给你的朋友留下印象深刻的汽车、汽艇、大房子，”富爸爸笑着说，“恐惧把你推出门外，愿望又召唤你过去，诱惑你去触礁。这就是陷阱。”&lt;br /&gt;
“那答案是什么呢？”&lt;br /&gt;
“强化恐惧和欲望是无知的表现，这就是为什么很多有钱人常常会担惊受怕。钱就是胡萝卜，人是幻想。如果驴能看到整幅图像，它可能会重新想想是否还要去追求萝卜。”&lt;br /&gt;
“对钱的无知导致了如此之多的恐惧和贪婪的产生。……不久，在富人和穷人之间就有了一条可怕的鸿沟，混乱就会爆发。当鸿沟达到了极点时，一个社会就会崩溃。……因为人们没有以史为鉴。我们只是记住了历史事件发生的时间和名称，却没记住教训。”&lt;br /&gt;
“价格难道不能上涨吗？”我问。&lt;br /&gt;
“在一个教育水平高和政府管理良好的社会中价格会上涨，&lt;font color=&quot;red&quot;&gt;实际上应该下降&lt;/font&gt;，价格上涨的原因是由无知引起的贪婪和恐惧。如果学校教学生认识钱，社会就有可能变得更富有且物价低廉。但学校关注的只是教学生为钱而工作，而不是如何开发和利用钱的力量”&lt;br /&gt;
“学会让感情跟随你的思想，而不要让思想跟随你的感情。当你俩控制了感情，同意免费干活时，我就知道你们还有希望。当你们在我用更多的钱诱惑你们时，你们抵制住了感情，你们就又一次进行了思考而不是任由感情控制你们。这是第一步。”&lt;br /&gt;
……&lt;br /&gt;
“我会叫你们三思而后行，而不是条件反射式地运动，就像匆忙咽下早餐的咖啡后跑去工作一样。记住我以前所说的：工作指示面对长期问题的一种暂时解决方法。大多数人心里只有一个问题，并且是短期的，那就是月末要付账了，于是又感到恐惧了。钱控制了他们的生活，或者说对钱的无知或恐惧控制了他们的生活。所以他们就像他们的父母一样生活，早早起来去工作挣钱，而从不抽时间问问，有什么别的法子吗？他们的思想由他们的感情控制着，而不是他们的头脑。”&lt;br /&gt;
……&lt;br /&gt;
“我总是听到这种话，‘每个人都必须去工作’，或者是‘富人是骗子’、‘我要换份工作’，‘我应该得到更高的工资’，‘我喜欢这份工作因为它很安定’，而不是说，‘&lt;font color=&quot;red&quot;&gt;我失去了什么东西吗？&lt;/font&gt;’，这样的话才会避免你感情用事而留给你仔细思考的时间。”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;　　上面这些摘抄都是我经过筛选后得出的，我已经剪短了很多，并且已经用红笔标出了重点。其实，通读下来最终不难发现作者的中心思想已经在这些摘抄中全面的覆盖到了。说来庆幸，直到我做完这些摘抄时又有了一次温习也发现了之前看过漏掉的思想。&lt;/p&gt;

&lt;p&gt;　　我有个朋友，自从他工作开始信心满满，但是随着时间的流逝他的目标已经慢慢从要做一番事业转变成了赚更多的钱了。他管我借过3次钱，第一次在13年的时候他家里出了点事，第二次是在15年的时候他想在北京买房子，第三次在17年他买了辆大宝马。前两次我觉得借他钱是很好的，因为一次是应急一次是投资也是刚需，但是对于第三次他买宝马这事上我觉得他已经掉入了这个模式的陷阱，因为他购入的不再是资产而是负债，到了现在他还一直在群里讨论各种汽车的性能以及他对他这辆宝马怎么怎么的改造追求性能上的突破。就算他的月薪再高无外乎就是这么一个死循环，等到以后他会陷的越来越深，直到他醒悟过来，希望那时不会为时已晚。&lt;/p&gt;

&lt;p&gt;　　我们应该像书中所说的一样，现在就要慢慢的一块一块的把钱积累到资产的堆积上来，以此来提高自己的投资水平和眼光，慢慢的才会拥有更大的财富。如果我们克制住了自己的贪婪和欲望，而是简谱的生活，不断买入资产，四处寻找机会，不断提高财商，我们不会过多久就会如巴菲特一样觉得赚钱是件快乐的事情，而不会像我那位朋友一样，现在觉得赚钱很累，感觉在消耗自己一样。&lt;/p&gt;

&lt;p&gt;　　书中第二个观念是，关注自己的事业。也如第一个观念一样，开门见山的说出了“职业不是事业”这个概念。现在很多人都把自己的职业混淆成了自己的事业。职业和事业不相等，我的职业是程序员，但是不代表我的事业就是程序，我可以是商人。往往我们把所学的专业当成了自己的事业，从而耗费一生的去关注别人的事业并使他人致富。我们所要做的是要定位自己的事业围绕于自己的资产，而不是收入。资产和负债之前的的区别就是去买人家资产。富人关心的焦点是他们的资产而其他人关心的确实他们的收入。&lt;/p&gt;

&lt;p&gt;　　现在，我们不妨设想一下，就在现在世界经济崩塌了，你还有那些东西可以让你保持稳定的收入？又有哪些自己觉得是资产的东西反而变成了自己的负债？房产吗？我不觉得在世界经济崩塌之时还会有人为了住进一个大房子里还会花大价钱从你手中买过来，同时这个房产的税负维护是不是也会变成自己的一种支出呢？当意识到了这个问题的时候，我们就应该懂得如何去分清楚什么是自己的资产了。别着急，作者已经为我们总结出了他认为的资产分类。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;不需要我到现场就可以正常运作的业务。&lt;/li&gt;
  &lt;li&gt;股票&lt;/li&gt;
  &lt;li&gt;债券&lt;/li&gt;
  &lt;li&gt;共同基金&lt;/li&gt;
  &lt;li&gt;产生收入的房地产&lt;/li&gt;
  &lt;li&gt;票据&lt;/li&gt;
  &lt;li&gt;专利权，如音乐、手稿、专利等&lt;/li&gt;
  &lt;li&gt;任何其他有价值、可产生收入或可能增值并且有很好的流通市场的东西&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;　　与此同时，我们还需要尽自己最大能力的去提高自己的财商。因为这样做，就会获得更大的成功。不这样做，对你来说，这个时代就会成为一个令人恐慌的时代。你会发现一些人勇敢地走在了前面，而另一些人却陷入生活的恶性循环并难以自拔。我们唯一、最重要的资产是我们的大脑。如果收到良好的训练，转瞬间它就能创造大量财富。&lt;/p&gt;

&lt;p&gt;　　书中的第三个和第四个概念分别是税收和投资。因为作者生活在资本主义社会中，和我们中国的社会主义有很大的差别的，就因为这些差别所以就有了很多不尽相同的地方，又因为这两个涉及的面颇大，所以我不打算在这里进行总结了。&lt;/p&gt;

&lt;p&gt;　　最后一个概念则讲的是我们不要为金钱而工作。这句看似普通的道理其实蕴含着丰富的含义。&lt;/p&gt;

&lt;p&gt;　　还拿我的那位朋友作为例子，我们是在新浪工作时遇到的。当时，我们都是普普通通的程序员，各自负责着不同的业务线的代码。后来，这位朋友跳槽到了搜狐干起了数据分析。干的本来生龙活虎，再后来就跳到了一个B2C的卖菜的电商网站。当时，在新浪他离开的时候我就问他为什么选择去搜狐，他的答案是在这里已经没有所学的东西了，我很赞成他的这种举动。可是，再后来的跳槽他为的纯粹是钱。我并不是说他的发展不好，我只是想说他的做法欠妥。虽然，金钱确实能够使他满足目前的虚荣心，但是长远来说这不是一件好事。&lt;/p&gt;

&lt;p&gt;　　其实，如果换我，我就会选择用另一种方法选择跳槽。其实大部分人需要学习掌握不并不止一项技能，只有这样他们的收入才能获得显著的增长。况且，即使就会一种技能在漫长的工作道路上，不会觉得很累么？相反，换一种技能，当然不是超脱出这个行业的技能，岂不是更好？我从新浪跳出来已经有年头了，我想做的事情其实有一部分是按照书中的方法走的，但是另一部分没有，所以我还是需要学习。就如同，作者在讲这个道理的时候刚开始就用了一个女记者采访他的例子讲述的一样，如果这位女记者能够勤奋地学习掌握市场及销售方面的技能，她的收入就会显著增加。&lt;/p&gt;

&lt;p&gt;　　就像作者一样，69年他从美国商业海洋学院毕业后从事加州标准石油公司的运油船队工作并且薪资可观，之后他又跳到了海军陆战队学习飞行。他的受过良好教育的穷爸爸非常伤心，而富爸爸则祝贺他做出的决定。在这里他的两位爸爸的观点就存在分歧，一个是认为他应该更加专业化的从事一项工作，而另一个却认为许多知识只需要知道一点就足够了。对于受过良好教育的爸爸来说，稳定的工作就是一切，而对于富爸爸来说，不断学习才是一切。&lt;/p&gt;

&lt;p&gt;　　我们很难对这两位爸爸的观点判断出孰对孰错，我从小到大的生长环境周围基本都是穷爸爸这样的例子，可以说是清一色吧。我身边倒是有一些抱着富爸爸理念的朋友，给我感觉更多的是一种飘在上面的感觉，不踏实。我觉得这和我的环境有很大的关系，我的家庭都是穷爸爸的教育方法。从目前的事实来看，我没看到我周围谁变成了富人。&lt;/p&gt;

&lt;p&gt;　　73年作者离开了军队，在施乐公司找到了一份工作，他的目的就是为了到这家公司学到美国最好的营销技能。富爸爸为他感到自豪，而穷爸爸为他感到羞耻。作者一做就是4年，做到了销售业绩榜前五后又辞去了工作，放弃了又一份的高薪。&lt;/p&gt;

&lt;p&gt;　　77年，作者组建了他自己的第一家公司。这也正是作者觉得自己羽翼丰满可以单飞的时刻了。他抱着如果破产就在30岁以前的观点，这样他还有时间东山再起。而那年作者29岁。直到现在作者依然在做着国际贸易的生意，虽然近几年有他的公司破产的消息，但是这个破产公司只是他的几个公司的其中一个，而其他的公司还在正常运转。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;工人付出最高限度的努力工作以避免被解雇，而雇主提供最低限度的工资以防止工人辞职。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;　　终于，小结的时刻到了。推荐了那么多这本书的理念了，也该说说这本书的缺点了。如果，你是一个经济领域的老鸟，你会很排斥这本书，这本书中很多的都是假大空的理论，并没有什么太适合我们学习的方法。因为，在读真本书的时候，人家推荐给我的都是一些这书的正面信息，但是坏的信息并没有。当然，别人推荐给我的一定是别人觉得读后感想很棒的书。然而，通过我读完以后，我并没有觉得学到了什么脚踏实地的东西，如果我们按照书中的方法去实施估计半途就会夭折，有人会说这本书给你的是一种全新的经济理念，我很认同。但是，我也不得不对这本书产生一定的质疑，毕竟在书中看到的例子有一些还是比较牵强附会的，也可以说作者的思想较为激进。&lt;/p&gt;

&lt;p&gt;　　总的来说，这本书适合普通用户就读，同时也是一本较不错的经济学初级读物。但是，你想从里面深究出什么你想遵循的示例的话，可惜大多并不能。&lt;/p&gt;</content><author><name>张一帆</name></author><category term="books" /><category term="经济,书籍" /><summary type="html">　　《富爸爸，穷爸爸》是一个真实的故事，作者罗伯特・清崎的亲生父亲和朋友的父亲对金钱的看法截然不同，这使他对认识金钱产生了兴趣，最终他接受了朋友的父亲的建议，也就是书中所说的。“富爸爸”的观念，即不要做金钱的奴隶，要让金钱为我们工作，并由此成为一名极富传奇色彩的成功的投资家。</summary></entry><entry><title type="html">德国旅行，浪漫之路</title><link href="http://localhost:4000/life/2017/11/21/01.html" rel="alternate" type="text/html" title="德国旅行，浪漫之路" /><published>2017-11-21T00:00:00+08:00</published><updated>2017-11-21T00:00:00+08:00</updated><id>http://localhost:4000/life/2017/11/21/01</id><content type="html" xml:base="http://localhost:4000/life/2017/11/21/01.html">&lt;p&gt;　　距离上篇文章已经过去将近两个月的时间了。这段时间仍然是以装修为主旋律的生活，我只能周末去转装修，而父母基本上一周三到四次的去房子那监督进度，对于他们的帮忙我很是感激，虽说二老现都已退休，但是母亲还依然在外面坐着外聘的工作。每周末带他们出去转的时候都会有一种愧疚的情绪在里面。&lt;/p&gt;

&lt;p&gt;　我感觉写游记之前还是先把要记录的事情交代一下比较好。&lt;/p&gt;

&lt;p&gt;　　在十一休息的这几天大家都在忙着过节休息，而我们没有一天不是在外面跑的。按理说十一这天应该和家里人吃一顿饭，但是女票家邀请我去他们家吃中午饭，因为她爷爷的极力邀请，所以我没办法推辞。一大早就得忙着去买礼品，买完礼品去她爷爷家串门。串完门吃饭，吃完饭想回去歇一歇。可是，爸妈跑到位于北五环到北六环中间的万家灯火建材城帮我们看建材去了，他们给我电话让我过去，因为他们在那边看到了一套东鹏卫浴的卫生间家具让我们过去看看。我们又是坐公交车，又是骑自行车感到了万家灯火，索性的是看完了卫浴后麻利的定下了他家产品，并且在他们下班之前约着卖家一同前往房子里测量洗浴房的地挡安装位置。这样紧巴的时间在余下来的十一假期中，没有一天不像这样。索性，在各方的帮助下，家中要买的慢慢都已经买了，就剩下客厅的家具了。在后来的日子中我还碰到了地砖托人淘宝价，壁纸不行换家，地板询问等双十一，窗户装歪重新安装，插销板细扣京东价，厨房瓷砖安装不行换人计以及母亲说哭女票，单刀赴会女票家解释的事等等等等。现在快十一月底了，房子刷完腻子了，约好了这周五铺壁纸，厨卫吊顶等着浴霸到后安装呢。后续的事情还有一堆呢。&lt;/p&gt;

&lt;p&gt;　　时间慢慢来到了11月，为德国旅行真是做足了准备。这次我们的行程是德国-奥地利-捷克三国自驾10天游。在9月份我就到租租车网站上挑选车型，在挑选的过程中查了很多攻略都说奔驰宝马是不能进入捷克的，也就是说豪华汽车进捷克会比较麻烦，所以我最终选定的车型是大众途观，选它的原因一是5座6行李箱空间较大，二是价格便宜，三是形成安全可以安全过境。虽然到了机场工作人员给我更换了车型-欧宝zarifa，但是车况很不错基本没什么剐蹭。&lt;/p&gt;

&lt;p&gt;　　11.4日是个周五，我们各自下班后先回家收拾行李，然后女票的爸爸弟弟开着他家车来我家接我。我们是11点到达的首都国际机场，在机场转了下免税店看了看要买的东西，一下子就逛了2小时。终于，在5日凌晨2点飞机起飞了，我们乘坐的是国航的飞机，位置比较小，对于我这种身高马大的男生来说确实比较难受，不过有过坐飞机的经验了，脱掉鞋，往后一仰直接睡着。经历了14个小时的飞行，我们在当地时间凌晨5点到达了德国慕尼黑机场，至此德国的旅行开始了，在接下来的10天我们时不时的会与当地警察产生接触，接触过程有好有坏，权当给自己增长见识了。
　&lt;/p&gt;
&lt;div align=&quot;middle&quot;&gt;
&lt;script&gt;
	document.write(&quot;&lt;iframe height=498 width=510 src='http://player.youku.com/embed/XMzE2MjI5ODQyNA==' frameborder=0 allowfullscreen&gt;&lt;/iframe&gt;&quot;);
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;　　到德国机场的时候离取车时间还有3个小时的时间，我们就在T2航站楼里的超市中随便逛了逛，我惊奇的发现德国的零度可乐卖0.99欧，相当于7.8人民币。这个价钱相当于国内的三倍，顶着物价三倍的压力，我在这一趟旅行中也没少买~后来，回国天天买零度，就是因为在旅行中确实有些憋坏了。&lt;/p&gt;

&lt;div align=&quot;middle&quot;&gt;
&lt;script&gt;
	document.write(&quot;&lt;iframe height=498 width=510 src='http://player.youku.com/embed/XMzE2MjI3MTg2NA==' frameborder=0 allowfullscreen&gt;&lt;/iframe&gt;&quot;);
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img class=&quot;lazy&quot; data-original=&quot;http://kupai-open.essintra.ejucloud.cn/b3240ea2-8a7e-4883-9276-a7f246bc2a80.JPG@imageMogr2/thumbnail/700x@watermark/2/text/bmFmZmFuLmNu/fill/cmVk/fontsize/700&quot; src=&quot;/images/default.jpg&quot; alt=&quot;sixt德国机场租车行&quot; /&gt;&lt;/p&gt;

&lt;p&gt;　　我们8：30在SixT租车公司租到了汽车，租车时工作人员只让我提供了国际护照（白色的那个，在国内免费办的）和驾照以及租车订单。我还强调了柜台人员我们不要买任何保险，因为在国内已经买了全险了。总体来说，德国的工作人员和蔼可亲而且语速较快，对于掌握不太好英文的人来说还是有一定难度的。最后，工作人员将车钥匙递到我手中让我去车库取车，并给了我一张出车库的门票还有停车位置的指示图。临走前，我问他我怎么换车，他告诉我开车回来在T1航站楼停车库会有停车场，你只需要把车听到那里并把车钥匙插入到钥匙孔中走人即可，我当时还萌萌的问人家车被偷了怎么办，工作人员很自豪的说这里是德国，言外之意就是德国素质很好不会有偷车行为。我一下子就感到了一种德国人内心中是有多么强烈的纯种日耳曼民族的优越感啊。其实，等我还车的时候才发现，车库是有专员指导停车的，而且车一旦入位后，后面还车的人会排到我的车后边，就算你想开车走都没办法，因为前后都是死车堵着你呢~ 亏我当时还以为停车场跟北京地上停车场一样，偌大的停车场随便进入呢~&lt;/p&gt;

&lt;p&gt;　　车开出车库后，一路按照朋友给发的酒店位置摸寻过去，德国的路比较窄，高速也是3车道，左车道为超车车道，中车道为平稳驾驶车道，右车道为大车及小车平稳驾驶车道。因为，之前去过西班牙自驾，所以知道他们的交通知识，并没有给我造成太大的压力。压力最多的应该是当地的道路多为交叉道，让我刚开始有种看不懂的感觉，生怕走错车道会被罚。不过，慢慢的就会适应。还有停车也比较头疼，不太记得当时攻略上怎么说的了，所以每次把车停下来以后都会问问旁边的人这停车的规矩是什么样子的。不过，后来就不担心了，因为虽然路边有好多售票机，但是如果你很快就要走的话，短暂的停留是没问题的，不会有电子眼监控你，欧洲纳税人很在意自己的钱去向的，不可能大方或者被大方的哪里都装电子眼。&lt;/p&gt;

&lt;div align=&quot;middle&quot;&gt;
&lt;script&gt;
	document.write(&quot;&lt;iframe height=498 width=510 src='http://player.youku.com/embed/XMzE2MjMwNjI3Mg==' allowfullscreen&gt;&lt;/iframe&gt;&quot;);
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;　　10：00我们与来自西班牙的小伙伴们汇合了，他们已经在德国玩了1天多了，刚到德国的他们还因为从机场坐地铁是可以在车上补票的呢，结果被乘务员无情的罚了每人60欧，开局不利呀。我们见了面去了安联球场和德国工业大学，给我留下印象深刻的是工业大学中有个图书馆，图书馆三层有两个滑道可以直接坐滑梯滑道一层。这种新颖的概念据说是德国工业系的学生构建起来的，德国大学竟然给学生那么大的权力，而且也能看出来德国对学生的创作的支持还是蛮给力的呢。&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;lazy&quot; data-original=&quot;http://kupai-open.essintra.ejucloud.cn/b419eddd-58df-4b7a-952b-f4ea4c76d74f.png@imageMogr2/thumbnail/700x@watermark/2/text/bmFmZmFuLmNu/fill/cmVk/fontsize/700&quot; src=&quot;/images/default.jpg&quot; alt=&quot;安联球场&quot; /&gt;&lt;/p&gt;

&lt;div align=&quot;middle&quot;&gt;
&lt;script&gt;
	document.write(&quot;&lt;iframe height=498 width=510 src='http://player.youku.com/embed/XMzE3NzI2MDYyOA==' allowfullscreen&gt;&lt;/iframe&gt;&quot;);
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;　　我们接下来会北上走一下著名的浪漫之路，然后在斯图加特往西去往黑森林最北端，之后再南下贯串黑森林绕回到天鹅堡，之后南下去奥地利，最后在捷克一路向北到达布拉格，最终回到德国慕尼黑。&lt;/p&gt;

&lt;p&gt;　首先，我们开车离开慕尼黑后，很快开上了举世闻名的浪漫之路。网上有很多浪漫之路的介绍，我就不在这里赘述了。我选择的路径是慕尼黑出发，途径&lt;a href=&quot;https://baike.baidu.com/item/讷德林根&quot;&gt;讷德林根&lt;/a&gt;，&lt;a href=&quot;http://blog.sina.com.cn/s/blog_6d16e651010130si.html&quot;&gt;多瑙沃特&lt;/a&gt;，&lt;a href=&quot;http://you.ctrip.com/travels/germany100025/1664245.html&quot;&gt;丁克尔斯比尔&lt;/a&gt;，最后到达&lt;a href=&quot;https://baike.baidu.com/item/罗腾堡&quot;&gt;罗腾堡&lt;/a&gt;住宿。&lt;/p&gt;

&lt;p&gt;　　奥格斯堡是德国中南部城市，这里是个一个贸易聚集地。我们只是匆匆的从这个城市经过，没有做太多停留，所以这个城市给我留下的印象并不深，以至于在写这篇文章的时候不论我怎么回忆这个城市都想不起来半点东西。有可能是我们第一天在德国高速公路上太专注的原因了吧，有可能这个地方已经被我当成了一个过客。&lt;/p&gt;

&lt;p&gt;　　讷德林根这个城市很是有趣，这个城市使我们走的这条线路上一个重要景点。这座城市是有城墙包围住的。据说这个城市是在1500万那年前由陨石撞击而形成的盆地上建立起来的，我很庆幸在这么一个富有历史性的地方留下了脚印。这个地方的建筑给我带来了一种冲击，这些建筑从小在电视上看到的一模一样。如果你玩过强手这个游戏的话，我觉得德国的民宅跟强手棋中花花绿绿的塑料房子的造型长的一模一样。这种带阁楼式的房子到底住在里面是一种什么感觉呢？里面会不会有暖气呢？还是真的像电视上一样，每家都有个烟囱，他们从火炉旁取暖？&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;lazy&quot; data-original=&quot;http://kupai-open.essintra.ejucloud.cn/dc0abde6-9ced-4f52-96da-40071b912f11.JPG@imageMogr2/thumbnail/700x@watermark/2/text/bmFmZmFuLmNu/fill/cmVk/fontsize/700&quot; src=&quot;/images/default.jpg&quot; alt=&quot;用手托着斜着照相&quot; /&gt;&lt;/p&gt;

&lt;p&gt;　　我们在这个城中随便走了走，本来说城中心有个&lt;a href=&quot;https://wxn.qq.com/cmsid/WXN2017112300148000&quot;&gt;塔楼&lt;/a&gt;可以上去鸟瞰整个城镇的，但是我们到达这里的时间正好是塔楼歇业的时间，所以就没上去。我们只是在这里简单的照了照相就开车继续赶往下一个目的地了。&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;lazy&quot; data-original=&quot;http://kupai-open.essintra.ejucloud.cn/7dbeecf4-e6f3-4412-b44c-ce096d9b4fbf.JPG@imageMogr2/thumbnail/700x@watermark/2/text/bmFmZmFuLmNu/fill/cmVk/fontsize/700&quot; src=&quot;/images/default.jpg&quot; alt=&quot;庞大的建筑&quot; /&gt;&lt;/p&gt;

&lt;p&gt;　　德国的公路可真是牛逼，一路畅通的要命。这里真是地广人稀啊，虽然以前在西班牙自驾游过，确实感受到过欧洲的高速公路的畅快，但是这次10天的自驾游，天天都会开车，所以感受的自驾快感真是爽到爆了。之后回到国内，早9点北三环的路上，速度能达到每小时10麦就不错，要知道我们在德国的高速公路上经常是140麦以上呢。可想而知，回来时开车的感觉一下子就骤降到了极点。&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;lazy&quot; data-original=&quot;http://kupai-open.essintra.ejucloud.cn/2b95a2b5-fefa-4e03-acdb-c83533b9b152.JPG@imageMogr2/thumbnail/700x@watermark/2/text/bmFmZmFuLmNu/fill/cmVk/fontsize/700&quot; src=&quot;/images/default.jpg&quot; alt=&quot;讷德林根&quot; /&gt;&lt;/p&gt;

&lt;p&gt;　　我们出了讷德林根后，奔向了多瑙沃特。一路上都出都是五颜六色的庄稼地，一片接一片的让我们看的应接不暇。我们当时其实已经被浪漫之路上的景观所折服了，但是谁成想后面的黑森林才更加让我们感受到了德国景色的壮丽。&lt;/p&gt;

&lt;p&gt;　　多瑙沃特这个城镇网上攻略都说他是个非主流小镇，因为他没有什么著名的景点可以吸引到旅游人们。虽然，这个地方没有被大多数人选择毕竟之地，但是这里是多瑙河和沃特河交汇处。而这座城市的名字也就去了这两条河流的名字。这个城市很简单，简单到你只是能看到路两旁的建筑物，其他什么都没有。&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;lazy&quot; data-original=&quot;http://kupai-open.essintra.ejucloud.cn/0a9bf618-2577-49a5-a8f4-b56159f9dc8c.JPG@imageMogr2/thumbnail/700x@watermark/2/text/bmFmZmFuLmNu/fill/cmVk/fontsize/700&quot; src=&quot;/images/default.jpg&quot; alt=&quot;sixt德国机场租车行&quot; /&gt;&lt;/p&gt;

&lt;p&gt;　　我有幸来到了这个地方，因为每当我听到多瑙河这个字眼的时候我会想起我曾经站在过多瑙河旁看着他与沃特河交汇。我在想正式这条河流孕育出了很著名的音乐曲子，比如蓝色多瑙河。虽然，多瑙河只是一条看起来很普通的河流，但是其长度可是相当长的，可以说这条河就像中国黄河一般给当地的民生带来了无限生机。&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;lazy&quot; data-original=&quot;http://kupai-open.essintra.ejucloud.cn/286f0fc8-0ed1-4d14-a755-2aaff54236a1.JPG@imageMogr2/thumbnail/700x@watermark/2/text/bmFmZmFuLmNu/fill/cmVk/fontsize/700&quot; src=&quot;/images/default.jpg&quot; alt=&quot;丁克尔斯比尔&quot; /&gt;&lt;/p&gt;

&lt;p&gt;　　下一站就是&lt;a href=&quot;http://blog.sina.com.cn/s/blog_5e4a15f101011qoh.html&quot;&gt;丁克尔斯比尔&lt;/a&gt;了。到这里的时候正好是下午4：30，趁着落日的余晖在，我们赶紧抓起手中的相机留下这匆匆的纪念。&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;lazy&quot; data-original=&quot;http://kupai-open.essintra.ejucloud.cn/803638c6-067d-4944-b844-7aed6c2a8edc.png@imageMogr2/thumbnail/700x@watermark/2/text/bmFmZmFuLmNu/fill/cmVk/fontsize/700&quot; src=&quot;/images/default.jpg&quot; alt=&quot;处理两旁&quot; /&gt;&lt;/p&gt;

&lt;p&gt;　　这个镇子并不大，风格跟之前的讷德林根有一些相像。瓦砖铺砌的路面上两排德国小尖房子矗立在两旁。红棕色的房顶再加上红色或者白色的楼面，组合成了一副独有的欧式建筑风格，这种风格朴素不招摇，给人的感觉就像进入了一座街心公园一样，舒适惬意。别看这里是个镇子，但是人还是挺多的，街上车来车往，一下就能让我想到这个镇子夏天时的喧哗和繁忙。&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;lazy&quot; data-original=&quot;http://kupai-open.essintra.ejucloud.cn/4ac3af95-5cf7-44df-94cd-75ad35474360.png@imageMogr2/thumbnail/700x@watermark/2/text/bmFmZmFuLmNu/fill/cmVk/fontsize/700&quot; src=&quot;/images/default.jpg&quot; alt=&quot;吃饭&quot; /&gt;&lt;/p&gt;

&lt;p&gt;　　我们在这个城里吃了顿晚饭，这是我们在德国吃的第一次饭。所以，我们挑选了这里的米其林三星的餐馆。但是，进去以后服务员告诉我们这里需要预定，最早的时间也是第二天的下午才能预定上。我们选择了在这个小镇子别的地方吃饭，幸好往前走了不到200米，我们找到了一家叫miser’s的咖啡饭馆。我们看到里面好多人都在吃饭，所以就跟着进去了。我们随后找服务员要了一份英文的菜单，然后点下了在德国的第一顿饭菜。&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;lazy&quot; data-original=&quot;http://kupai-open.essintra.ejucloud.cn/83d03b0d-46a2-4e8e-a17c-a82575e45cb6.jpg@imageMogr2/thumbnail/700x@watermark/2/text/bmFmZmFuLmNu/fill/cmVk/fontsize/700&quot; src=&quot;/images/default.jpg&quot; alt=&quot;吃饭啊&quot; /&gt;&lt;/p&gt;

&lt;p&gt;　　说实话，这里的饭菜很贵，人均得200多人民币呢。不过出来玩嘛，该破费的还是要破费的。在欧洲的饭馆是讲究给小费的，我们大家就该不该给小费做了激烈的讨论。原因是，这家的一个女服务员对待我们的态度很不友好，爱答不理且高傲自大。给我的感觉就是这个女服务员歧视亚洲人，所以我做出了不给小费的选择。德国在人文方面给我的印象不是很好，这是第一次感受到被鄙视了。&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;lazy&quot; data-original=&quot;http://kupai-open.essintra.ejucloud.cn/1ee4b07c-7588-43d0-802f-f9d2e9dfdeb3.png@imageMogr2/thumbnail/700x@watermark/2/text/bmFmZmFuLmNu/fill/cmVk/fontsize/700&quot; src=&quot;/images/default.jpg&quot; alt=&quot;车程&quot; /&gt;&lt;/p&gt;

&lt;p&gt;　　我们吃完饭大概是7：00了吧，我们距离罗腾堡还有半个多小时的路程。德国在下午5点的时候就天黑了，所以我们在德国的国道上驾驶除了车灯以外什么都看不到。不过，路上车并不多，我们很快到了&lt;a href=&quot;https://baike.baidu.com/item/罗腾堡/5273810?fr=aladdin&quot;&gt;罗腾堡&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;　　罗腾堡也是一个镇子，这里有个城中心，城中心就是守夜人活动的起点。很多游客都会聚集在这个地方一度古老习俗流传下来的守夜人巡城。其实，就是一个又高又大的老头提了个灯笼到处走一走看一看而已。但是，很不巧的是这天刚巧是城中的马拉松运动会，所以守夜人活动取消了，我们没有看成~后来，我们就随便在镇子上转了转留下了一些照片后就回酒店休息了。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://pan.baidu.com/s/1qXJGuM4&quot;&gt;我的相册&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>张一帆</name></author><category term="life" /><category term="旅行,德国" /><summary type="html">　　距离上篇文章已经过去将近两个月的时间了。这段时间仍然是以装修为主旋律的生活，我只能周末去转装修，而父母基本上一周三到四次的去房子那监督进度，对于他们的帮忙我很是感激，虽说二老现都已退休，但是母亲还依然在外面坐着外聘的工作。每周末带他们出去转的时候都会有一种愧疚的情绪在里面。</summary></entry><entry><title type="html">最近家里装修以及准备出游</title><link href="http://localhost:4000/life/2017/09/28/01.html" rel="alternate" type="text/html" title="最近家里装修以及准备出游" /><published>2017-09-28T00:00:00+08:00</published><updated>2017-09-28T00:00:00+08:00</updated><id>http://localhost:4000/life/2017/09/28/01</id><content type="html" xml:base="http://localhost:4000/life/2017/09/28/01.html">&lt;p&gt;时间匆匆流逝，回看上一篇文章也是6月份的事了，这三个月没有时间写作实在是因为家里的事让我分身乏术。今天终于有空过来写写关于这三个月的事情了，就当给自己做下记录吧。话说回来我的这个博客也开通有一年的时间了，感叹时间过的飞快的同时也给自己立下一个里程碑吧。&lt;/p&gt;

&lt;p&gt;对于家中装修我们着实花了很大的力气。因为我已经到了娶妻生子的年龄了，所以从4月份开始家里就为了我将回龙观的房子腾出来准备装修了。4月份是北京初春的时节，本要开始装修，可是女朋友要应付研究生考试所以要一直背书奋战到5月中旬，所以我们一直在等她考完试。在这段时间里我们双方父母正式见了面，我家也去她家正式的登门拜访了。另外，今年的3月到6月我们部门因为赶进度所以强制进行10106的高负荷工作，经常是晚上加完班后回到家就直接睡了，周末只有一天休息的时间，所以装修的事情就一直这么被拖着。终于来到了7月，我们部门的项目不再那么紧急了，所以才有了比较充足的休息时间。在这个月里我也回复了自己的健身计划。现在写下这篇文章的时候也是我快健身一年了，健身的效果还是蛮可喜可贺的，由原先的200斤一直减到现在的178斤。健身的目的就是能够赶在拍婚纱照之前让自己的身体看起来很有型，索性在9月5日拍婚纱照的时候在镜子中看到了自己肌肉感满满的效果。&lt;/p&gt;

&lt;p&gt;8月是我最忙的时间，在这个月中我们一直在逛建材市场，没有一个星期不是这样过来的。最终，在8月底我家的装修正式开始了。其实，在5月份的时候我们就一直在找装修队。聊过和量房的工长不下5个，每和一个工长量房到出报价单最少就需要1个星期。最终，我们选择了我现在住所旁边的装修队伍的工长。这个工长给我们的报价单是这些工长里最低的，虽然到现在还不能评价这个工长的好坏，但是至少还能入得了我的法眼。就8月来说我的父母跑了2趟山东，而我和我女朋友跑了3次香河家具城。现在回想当时体力还真是充沛，不过我记得最后那次香河家具城我已经得了感冒了，正好那天早上就下雨，一直下到晚上。回来我就发烧了，第二天都没有上班。这个月还定下了11月出游的计划，这也是碰巧赶上的。当时女朋友公司有个机票优惠的活动，给了我们一天的商量时间，问了下西班牙的朋友。正好他们11月份有空，所以就拍脑子定下了11月份去德国游玩的行程了。&lt;/p&gt;

&lt;p&gt;9月份也在跑装修，定了防盗门和瓷砖了。为了瓷砖我们跑的已经妈都不认识了，最终还是在回龙观市场中定的小牌子的。今天瓷砖送到了回龙观，后天就该铺设瓷砖了。为了瓷砖真的没少下功夫，最终选择的瓷砖还让我女朋友生一回气，最后跟我冷战了3天，最厉害的时候还都哭了。索性，工期还是正常向前走的，水电改造也已经完成了，虽说总感觉公长在这里挣了很多钱，但是就是不知道他是怎么挣的，说也不好说。另外，因为8月份订好了去德国旅游，所以这个月一直在准备德国签证的材料。因为这回是我们俩自己弄行程，所以很多琐碎的小事都得让我们自己亲自跑。我这边的总公司还在上海，来回办营业执照附件和工作在职证明都得走流程，最后还得从上海快递回北京公司。因为当时工作证明忘记在第一次办营业执照的流程中做了，所以一共做了2次，这一下就号了4周的时间。我女朋友那边也因为工作证明中多写了捷克所以担心怕被拒签又重新走了一边流程，也多耗时了一周。这些琐碎的事情拖拖拉拉的办到了上周四，最终预约了这周一的面签。不过，经过了那么多曲折终于今天拿到了我们的德国签证。&lt;/p&gt;

&lt;p&gt;自从6月初我们去了婚博会定了婚纱照，9月份我们又去了一次婚博会，碰巧的是我们旁边的酒店Holiday inn正好也参展了，而且还新推出了他们的小院。这正好满足了我女朋友对婚礼的要求，所以很痛快的就定下了婚礼的酒店。这次真的是碰巧了，为了酒店我们跑了不下9个地方，时间跨度很大。如果不是这次乱闯还真不知道酒店这事会让我头痛多长时间呢。接下来就是选择婚庆公司了，我打算再去一次婚博会，据说春夏秋冬都有婚博会，估计这也是三个月后的事情了，到时候看看在婚博会上能不能定下心仪的婚庆公司吧。&lt;/p&gt;

&lt;p&gt;我还要说下自己的健身效果。自从去年10月开始我就开始了健身。今年的3-6月因为工作关系没有去，但是自己也一直在吃严格要求自己。所以那段时间没有反弹，7月份后恢复训练，到8月份刷脂，一直到现在还一直保持着一周至少两天去健身。一年来健身的效果是能直观的看出来的，谁看到我都会说我瘦了不少。其实我的不光瘦了，还涨肌肉了，所以肥肉更少了。这种健康的饮食习惯和锻炼习惯我一定要保持下去。因为，明年婚礼还是个里程碑呢&lt;/p&gt;</content><author><name>张一帆</name></author><category term="life" /><category term="旅行,德国,装修" /><summary type="html">时间匆匆流逝，回看上一篇文章也是6月份的事了，这三个月没有时间写作实在是因为家里的事让我分身乏术。今天终于有空过来写写关于这三个月的事情了，就当给自己做下记录吧。话说回来我的这个博客也开通有一年的时间了，感叹时间过的飞快的同时也给自己立下一个里程碑吧。</summary></entry><entry><title type="html">MAC下配置php环境遇到的费解问题</title><link href="http://localhost:4000/tech/2017/06/15/01.html" rel="alternate" type="text/html" title="MAC下配置php环境遇到的费解问题" /><published>2017-06-15T00:00:00+08:00</published><updated>2017-06-15T00:00:00+08:00</updated><id>http://localhost:4000/tech/2017/06/15/01</id><content type="html" xml:base="http://localhost:4000/tech/2017/06/15/01.html">&lt;p&gt;&lt;img src=&quot;http://kupai-open.essintra.ejucloud.cn/6a6fac86-fda8-4d94-8e86-051f1befa32e.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;　　就在昨天晚上突然起了雅兴看了个大型网站redis队列应用的视频，正巧上班的时候和一位同事聊起了这个话题，突然发现曾经的理解有些偏差，所以正好趁这个机会自己练一下。谁成想刚开始动手就遇到了问题。&lt;/p&gt;

&lt;p&gt;　　我家中的MAC很久没用来编程了，一直都是用我班上的MAC编程。刚写完准备测试一下，结果打开localhost运行后，竟然显示的是”It works”。我回忆了一下我曾经对这台电脑做过的调整，我也没有重装过啊。两年前用它来写php程序还是好好的啊，怎么一下子就不行了呢？我脑子蒙了一下，这不是服务器的默认页面吗？nginx什么时候用”It works”来显示默认页面了呢？打开文件的路径怎么显示404啊？&lt;/p&gt;

&lt;p&gt;　　蒙蒙的我想一下应该如何开始排查问题。第一步先brew services stop nginx。再刷新localhost后，还是”It works”。擦，一种不好的预感油然而生，这是apache的默认页面好不啦。。。我记得我曾经删过MAC自带的apache和php的啊，怎么apache自己又装回来了？突然我意识到我曾经升级过MAC的版本。马上用terminal打开/etc/apache2，发现了apache又重新安装回来了，这个时候我才意识到MAC更新版本以后apache和php又重新安装回来了，而且还都使用了默认配置。可是我又一想，我工作用的MAC也升级了啊，怎么工作的电脑没有被重新配置啊。这让我百思不得其解，算了不想那么多了，先解决这个问题并重新配置吧。&lt;/p&gt;

&lt;p&gt;　　接下来，我需要做的就是关闭默认的apache。&lt;/p&gt;

&lt;p&gt;sudo apachectl stop&lt;/p&gt;

&lt;p&gt;　　刷新localhost，apache还运行着。。。再刷新一下，服务停止了。再刷新下，apache又运行了，再刷新又停了。我去，这个问题真诡异，上网搜了下问题也没有人遇到过。&lt;/p&gt;

&lt;p&gt;　　打开nginx后，还是这鸟样。那我看下nginx的配置吧，nginx配置怎么被还原了啊，而且还指定到了8080端口。那我localhost:8080看看什么样子，一切正常啊。我再打localhost后，apache服务真正停止了，难道这还有缓存啊。。。&lt;/p&gt;

&lt;p&gt;　　打开phpinfo.php发现，php解析不了了。应该是配置被还原造成的，不行重新配置servers吧。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-nginx&quot;&gt;server {
        listen       8080;
        server_name  localhost;
        root /Library/WebServer/Documents;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            index  index.html index.htm;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        
        location ~ \.php$ {
            fastcgi_pass   127.0.0.1:9000;
            fastcgi_index  index.php;
            fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
            include        fastcgi_params;
        }

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;　　在配置上边的配置的时候，因为有一段时间没有配置有些淡忘了，所以刚开始配置的时候出现了几个问题，特此我在这里写一下。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.listen       80&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;　　如果这样配置的话，在重启nginx的时候回提示permission denied。这是因为MAC认为1000以下的端口是不能够被除了管理员以外的人配置的。我曾试过改成80端口，但是brew services start nginx以后，nginx显示的是黄色，这说明nginx的启动有问题。后来再一想就为了每次打localhost不打80不是特别值当的，既然系统不建议用80端口，那么我就从了吧，我也没什么大项目会在这台机子上做，也就是运行一些简单的测试代码，打8080就打吧。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;　　这句话的意思是引导php-fpm解释所要运行的文件。$document_root是root /Library/WebServer/Documents的变量。如果你这样做的话，nginx会将错误的路径引导至php-fpm，就会出现“File not found”。这也是nginx配置新手经常错的地方。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.root /Library/WebServer/Documents&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;　　这个就是指定当前服务的根目录。我们应该将其放在server模块底下，原因是根目录是整个配置的全局变量，所有的请求都可以被代理到这个地址上。当然，你可以将其放到location中，但是如果你有多个location的话，你不得不在每一个location中指定root。所以，我们才将其放到server中，之后用$document_root来引用。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4.autoindex on&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;　　这个命令式开启目录索引，nginx默认是不开启的。如果你网站有默认的index.html，nginx就只会展示index.html。如果没有index.html就会用目录索引来展示&lt;/p&gt;

&lt;p&gt;　　nginx配置完毕了，服务也能够正常运作起来了，接下来就是php了。在配置php的时候我发现cli的php可以和cgi的配置不同，也就是说可以两者分别指定不同的php.ini。而且，cli的php.ini更改后不需要重启php服务就可以更新服务。这是因为cli是独立的服务不依托于服务器，只有cgi依托于服务器所以更新了php.ini后需要重启服务。&lt;/p&gt;

&lt;p&gt;　　我们可以通过运行php –ini来查看cli读取的php.ini。phpinfo.php可以用来查看服务的php.ini情况。&lt;/p&gt;

&lt;p&gt;　　在关闭apache之前，我曾想过就用apache吧，但是我竟然找不到MAC自带的php是安装在哪里了。后来发现也许是apache中的libphp5.so扩展来解释php的。这种方式给我带来的不方便的地方就是以后我想给php添加扩展的时候不知道如何操作。&lt;/p&gt;</content><author><name>张一帆</name></author><category term="tech" /><category term="php,ngxin,apache" /><summary type="html"></summary></entry><entry><title type="html">正确理解javascript中的Event loop机制</title><link href="http://localhost:4000/tech/2017/06/04/01.html" rel="alternate" type="text/html" title="正确理解javascript中的Event loop机制" /><published>2017-06-04T00:00:00+08:00</published><updated>2017-06-04T00:00:00+08:00</updated><id>http://localhost:4000/tech/2017/06/04/01</id><content type="html" xml:base="http://localhost:4000/tech/2017/06/04/01.html">&lt;p&gt;&lt;img src=&quot;http://kupai-open.essintra.ejucloud.cn/c3041c9a-ee21-412a-83e3-a7d0d3c56214.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;　　这两个星期一直在想着写一篇关于javascript中event Loop的文章。自从写完上一篇&lt;a href=&quot;http://naffan.cn/tech/2016/12/10/1.html&quot;&gt;《Javascript捕捉(capturing)与冒泡(bubbling)的区别》&lt;/a&gt;之后，我抛出了一个问题。当时的我对event loop的概念还很模糊，只是觉得这个问题隐隐约约跟它有关系。我当然不能放下这个问题太久，太久了就会忘记自己原先的初衷了。所以，在看了很多关于event loop的文章和视频以后我打算将这篇文章写出来。在文章的最后，我将列举出我所翻阅的所有资料，而且我很建议大家看一看。&lt;/p&gt;

&lt;p&gt;　　想要了解event loop的概念，首先就要知道几个有关的概念。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;什么叫做栈&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;　　栈（stack），是计算机内存存储的一种方式。数据进入栈叫做压栈，数据从栈中出来叫做出栈。栈的存储方式只支持先进后出，后进先出的原则。如果你熟悉C语言的话，你就会知道栈中的数据是静态数据，这些数据是由计算机分配的数据，不能被我们程序员进行更改。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;什么叫做堆&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;　　堆（heap），也是计算机内存存储的一种方式。数据根据所属的某种key分散存储在内存单元。同样你如果熟悉C语言的话，你就会知道堆中的数据是动态数据，是由操作者们单独创建出来的存储单元。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;什么叫做队列&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;　　队列（queue），他是一种解决问题的方法。我们人为的规定队列中的数据具有先进先出，后进后出的规则。也就是说如果你想出队你就必须等你前面的所有数据全部出队以后你才可以出队。&lt;/p&gt;

&lt;p&gt;　　我相信有了以上的几种知识，你就能够明白我接下来要解释的长篇大论了。我们知道多个事情并发的时候就会出现你忙不过来的情况，如果你忙不过来那么就得让所有后面的事情等待你先解决手头的事情。这样就会出现后面的事务堆积得不到解决，那么我们怎么解决这个问题呢？javascript采用的并发模型是基于“事件循环”的。那什么叫做事件循环呢？下面我就一点一点展开。&lt;/p&gt;

&lt;p&gt;　　首先声明的是，javascript是单线程的。他不可能有多线程的性质，而只是在模仿多线程的样子让我们感觉像多线程一样。&lt;/p&gt;

&lt;script async=&quot;&quot; src=&quot;//jsfiddle.net/naffan/yas8jLho/embed/js,html,css,result/dark/&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;img src=&quot;https://ooo.0o0.ooo/2017/06/08/5938ee1832fb5.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;　　从上图，我们可以看到这段代码展示的形式就是栈的表示方法。最先运行的代码最先压进栈，我们可以看到onload其实就是代码的main函数，然后依次压栈bazz,bar,foo，而在foo中抛出一个错误停止了程序的运行。&lt;/p&gt;

&lt;p&gt;　　在javascript中我们运行代码的时候，如果执行的时间很长，那么我们在这段时间内是做不了别的事情的。这就是单线程的弊端。我们可以运行个例子进行测试。&lt;/p&gt;

&lt;script async=&quot;&quot; src=&quot;//jsfiddle.net/naffan/qg247n3b/embed/js,html,css,result/dark/&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;img src=&quot;https://ooo.0o0.ooo/2017/06/08/5938ee1830a44.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;　　上面的程序，我们进行了递归调用，并且没有做异常处理。那么运行的时候会无限的调用foo函数直到碰触到内存中的栈最大值，这个时候js会抛出系统异常并终止程序。&lt;/p&gt;

&lt;p&gt;　　在这里我有个好奇点，栈到底有多大呢？当然，我不能具体量化到栈可以存储多少个字节，但是我可以通过循环的次数大体判断一下。&lt;/p&gt;

&lt;script async=&quot;&quot; src=&quot;//jsfiddle.net/naffan/m2aherx0/embed/js,html,css,result/dark/&quot;&gt;&lt;/script&gt;

&lt;p&gt;　　这段代码在不同的浏览器中会有不同的结果，大体结果如下：&lt;/p&gt;

&lt;h3 id=&quot;internet-explorer&quot;&gt;Internet Explorer&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;IE6: 1130&lt;/li&gt;
  &lt;li&gt;IE7: 2553&lt;/li&gt;
  &lt;li&gt;IE8: 1475&lt;/li&gt;
  &lt;li&gt;IE9: 20678&lt;/li&gt;
  &lt;li&gt;IE10: 20677&lt;/li&gt;
  &lt;li&gt;IE11:54375&lt;/li&gt;
  &lt;li&gt;edge : 16615&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;mozilla-firefox&quot;&gt;Mozilla Firefox&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;3.6: 3000&lt;/li&gt;
  &lt;li&gt;4.0: 9015&lt;/li&gt;
  &lt;li&gt;5.0: 9015&lt;/li&gt;
  &lt;li&gt;6.0: 9015&lt;/li&gt;
  &lt;li&gt;7.0: 65533&lt;/li&gt;
  &lt;li&gt;8b3: 63485&lt;/li&gt;
  &lt;li&gt;17: 50762&lt;/li&gt;
  &lt;li&gt;18: 52596&lt;/li&gt;
  &lt;li&gt;19: 52458&lt;/li&gt;
  &lt;li&gt;42: 281810&lt;/li&gt;
  &lt;li&gt;49: 8921&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;google-chrome&quot;&gt;Google Chrome&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;14: 26177&lt;/li&gt;
  &lt;li&gt;15: 26168&lt;/li&gt;
  &lt;li&gt;16: 26166&lt;/li&gt;
  &lt;li&gt;25: 25090&lt;/li&gt;
  &lt;li&gt;28: 26000&lt;/li&gt;
  &lt;li&gt;47: 20878&lt;/li&gt;
  &lt;li&gt;51: 41753&lt;/li&gt;
  &lt;li&gt;56: 20922&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;safari&quot;&gt;Safari&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;4: 52426&lt;/li&gt;
  &lt;li&gt;5: 65534&lt;/li&gt;
  &lt;li&gt;9: 63444&lt;/li&gt;
  &lt;li&gt;10: 73399&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;opera&quot;&gt;Opera&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;10.10: 9999&lt;/li&gt;
  &lt;li&gt;10.62: 32631&lt;/li&gt;
  &lt;li&gt;11: 32631&lt;/li&gt;
  &lt;li&gt;12: 35990&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;　　不过以上的数据并不能说明什么，因为当你再用同样的版本浏览器再次运行脚本的时候会发现得出的结果和上次并不太一样。何况这也取决你所处的软件环境和内存运行情况。所以说，这些结果也就是玩玩而已并没有什么实际意义。&lt;/p&gt;

&lt;p&gt;　　接下来，让我们看看js在运行程序的时候是如何在栈中存储的吧。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://kupai-open.essintra.ejucloud.cn/6d3ad175-e285-458b-95eb-6a6769ecd635.gif&quot; alt=&quot;2017-06-08 22_47_11&quot; /&gt;&lt;/p&gt;

&lt;p&gt;　　我们看到js在启动的时候先将main()函数压入栈底，然后运行到printSquare()时将其压入栈中，紧接着将square和multiply接连压栈。这样就构造出了完整的printSquare()函数运行栈，紧接着程序将按照出栈的顺序开始执行，直到栈空为止。下面让我们接着来看下远程调用数据时的情况。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://kupai-open.essintra.ejucloud.cn/5a6be3e5-cd1b-4f7a-b744-02ce0216981e.gif&quot; alt=&quot;2017-06-08 22_57_55&quot; /&gt;&lt;/p&gt;

&lt;p&gt;　　这个效果和上一个例子的运行效果是一样的，但是我们注意到每个远程调用都是需要一段时间等待的，如果一个连接网络用时超长那么给我们的感觉就如同卡死一样，我们既不能操作别的动作，浏览器也不能处理诸如渲染页面之类的操作。这一问题是非常严重的，原因所在就是js是单线程的，浏览器只能完成一个任务之后再去执行下一个任务。&lt;/p&gt;

&lt;p&gt;　　那么我们需要一个解决办法，这个办法就是你常用的异步回调，更准确的说就是回调函数。我们运行的时候将其运行过程保存起来，在将来的&lt;strong&gt;某个时间点&lt;/strong&gt;再运行。请注意在这里所说的某个时间点的概念，请务必带着“哪个时间点？”的问题往下看。虽然我可以直接告诉你答案~&lt;/p&gt;

&lt;script async=&quot;&quot; src=&quot;//jsfiddle.net/naffan/t2a1gL67/2/embed/js,html,css,result/dark/&quot;&gt;&lt;/script&gt;

&lt;p&gt;　　我期望你能够运行一下并在浏览器中的控制台查看结果。&lt;/p&gt;

&lt;p&gt;　　setTimeout函数将方法体保存在了队列中以让他在将来的5秒后运行。这个时候队列的概念出来了。那么问题又来了，从代码直观上来看，这样的运行结果并不稀奇，因为我让方法体5秒后执行，可不就是先执行下面的代码了么？我们再来看个例子，请你对上面的代码修改5秒为0秒，试下看看结果变没有变。&lt;/p&gt;

&lt;p&gt;　　答案是没有变，虽然设置为了0秒。但他并不就等同于立即执行，而是&lt;strong&gt;某种东西&lt;/strong&gt;将其放到了队列中，当别的步骤都走完了才能开始运行队列中的代码。请注意这里所述的“某种东西”并不是javascript，而是浏览器，更准确的说是浏览器底层的C++。我们可以查看&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/API/Window/setTimeout&quot;&gt;window.setTimeout&lt;/a&gt;，setTimeout是底层WEB API提供的接口，他是我们在使用javascript编写web代码时由底层进行的。所以setTimeout并不是javascript的特性，而是浏览器。再进一步说，我们在做异步的时候是浏览器在帮助我们将方法体塞进队列，然后在未来的某个时间再从队列出来并执行的，从而给了我们一种异步的感觉。javascript是单线程的这句话，这里淋漓尽致的体现出来了吧。还有，网上各种文章标题什么的js的setTimeout其实都是bullshit。&lt;/p&gt;

&lt;p&gt;　　接下来，让我们真正带着event loop的概念看一看是如何进行的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://kupai-open.essintra.ejucloud.cn/42b86a94-85af-4bf2-a69e-74e5f63ada33.gif&quot; alt=&quot;2017-06-08 23_54_45&quot; /&gt;&lt;/p&gt;

&lt;p&gt;　　这个程序中直到webapis存储着timer之前的逻辑我不讲了（前面已经说的足够了），之后timer运行5秒以后将cb()函数塞进队列中，event loop会一直干两件事，一是检查栈中是否为空，二是检查队列是否为空。如果队列中不空就将最先执行的cb函数在栈为空的时候压栈并执行。最终得到的效果就如同异步一样，完美的完成了异步操作。&lt;/p&gt;

&lt;p&gt;　　接下来让我们看看Ajax的情况吧，其实和之前的例子没有什么两样的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://kupai-open.essintra.ejucloud.cn/f8d1801c-eba5-4aff-8d01-416b463fc704.gif&quot; alt=&quot;2017-06-09 00_07_04&quot; /&gt;&lt;/p&gt;

&lt;p&gt;　　如果很多的异步回调（几乎）同时触发，那么是什么情况呢？&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://kupai-open.essintra.ejucloud.cn/06146fe0-5b01-46d0-9f11-ee9eec70de96.gif&quot; alt=&quot;2017-06-09 00_11_05&quot; /&gt;&lt;/p&gt;

&lt;p&gt;　　就像刚才我所提到event loop所干的两件事，它一直在监察着栈和队列。当第一个timeout进入队列要出队列的时候，event loop发现栈中还在运行代码，所以就先不让其出队列而是等到栈中为空时才出队列，之后进来的timeout函数都要被event loop告知栈为空时才可以一个一个进行出队列并执行。&lt;/p&gt;

&lt;p&gt;　　如果你想了解更多的话，我强烈建议你点击下边第三个引用连接，这个连接里面的内容是一个js运行时的模拟器，你可以自己写程序，他可以直观的帮助你了解你写的程序在系统中是如何执行的。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;https://www.youtube.com/watch?v=8aGhZQkoFbQ&lt;/li&gt;
  &lt;li&gt;https://2014.jsconf.eu/speakers/philip-roberts-what-the-heck-is-the-event-loop-anyway.html&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://latentflip.com/loupe/?code=JC5vbignYnV0dG9uJywgJ2NsaWNrJywgZnVuY3Rpb24gb25DbGljaygpIHsKICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gdGltZXIoKSB7CiAgICAgICAgY29uc29sZS5sb2coJ1lvdSBjbGlja2VkIHRoZSBidXR0b24hJyk7ICAgIAogICAgfSwgMjAwMCk7Cn0pOwoKY29uc29sZS5sb2coIkhpISIpOwoKc2V0VGltZW91dChmdW5jdGlvbiB0aW1lb3V0KCkgewogICAgY29uc29sZS5sb2coIkNsaWNrIHRoZSBidXR0b24hIik7Cn0sIDUwMDApOwoKY29uc29sZS5sb2coIldlbGNvbWUgdG8gbG91cGUuIik7!!!PGJ1dHRvbj5DbGljayBtZSE8L2J1dHRvbj4%3D&quot;&gt;相当推荐的工具，由于连接较长影响了美观，所以做成了超链接&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/EventLoop&lt;/li&gt;
  &lt;li&gt;https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage&lt;/li&gt;
  &lt;li&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError&lt;/li&gt;
&lt;/ul&gt;</content><author><name>张一帆</name></author><category term="tech" /><category term="javascript" /><summary type="html"></summary></entry></feed>